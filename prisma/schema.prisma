// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id              Int          @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String       @unique
  phone           String
  verifiedEmailAt DateTime?
  role            Role         @relation(fields: [roleId], references: [id])
  roleId          Int
  userCourses     UserCourse[]
  Credential      Credential?
}

model Credential {
  id       Int    @id @default(autoincrement())
  alias    String @unique
  password String
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
}

model Modality {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
}

model InscriptionStatus {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userCourses UserCourse[]
}

model Course {
  id          Int          @id @default(autoincrement())
  name        String
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  Int
  modality    Modality     @relation(fields: [modalityId], references: [id])
  modalityId  Int
  duration    String
  fee         Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userCourses UserCourse[]
}

model UserCourse {
  id            Int               @id @default(autoincrement())
  user          User              @relation(fields: [userId], references: [id])
  userId        Int
  course        Course            @relation(fields: [courseId], references: [id])
  courseId      Int
  inscription   InscriptionStatus @relation(fields: [inscriptionId], references: [id])
  inscriptionId Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}
